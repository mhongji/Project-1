---
title: "Project 1"
author: 
  - Hongjing Mao
  - Yuhan Hu
date: "2025-06-14"
format: pdf
editor: visual
---

## Step 1: Data preprocessing

```{r}
library(tidyverse)

url <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"

edu01a <- read_csv(url, show_col_types = FALSE) %>% 
  select(
    area_name = Area_name,   
    STCOU,
    ends_with("D")          
  )

head(edu01a, 5)              
```

## Step 2: wide string to long string

```{r}
library(tidyr)
edu01a_long <- edu01a %>% 
  pivot_longer(
    cols  = -c(area_name, STCOU),   
    names_to  = "raw_var",          
    values_to = "enrollment",       
    values_drop_na = TRUE          
  )
head(edu01a_long, 5)               
```

## Step 3: Parse variable name string

```{r}
long_updated <- edu01a_long %>% 
  mutate(
    # last two digits before the "D"
    yr_two      = substr(raw_var, nchar(raw_var) - 2, nchar(raw_var) - 1),  # e.g. "97" or "02"
    year        = as.integer(
                   if_else(as.integer(yr_two) <= 30,  
                           paste0("20", yr_two),
                           paste0("19", yr_two))      
                 ),
    measurement = substr(raw_var, 1, 7)               
  ) %>% 
  select(-yr_two)                                     

head(long_updated, 5)
```

## Step 4: Separate county vs non-county data & add classes

```{r}
library(dplyr)
library(stringr)

county_idx <- grep(", \\w\\w$", long_updated$area_name)

county_tibble <- long_updated[county_idx, ] %>% 
  mutate(area_name = str_trim(area_name))          
class(county_tibble) <- c("county", class(county_tibble))

state_tibble  <- long_updated[-county_idx, ]
class(state_tibble)  <- c("state",  class(state_tibble))

# quick check: first 10 rows of each
head(county_tibble, 10)
head(state_tibble,  10)
```

## Step 5: Create new variable

```{r}
library(stringr)
new_county_tibble <- county_tibble %>% 
  mutate(
    state = str_sub(area_name, -2, -1) 
  )
head(new_county_tibble, 10)
```

## Step 6: Create new "division" variables

```{r}
{r}
state_division <- c(
  "CONNECTICUT" = "New England", "MAINE" = "New England", "MASSACHUSETTS" = "New England",
  "NEW HAMPSHIRE" = "New England", "RHODE ISLAND" = "New England", "VERMONT" = "New England",
  
  "NEW JERSEY" = "Mid-Atlantic", "NEW YORK" = "Mid-Atlantic", "PENNSYLVANIA" = "Mid-Atlantic",
  
  "ILLINOIS" = "East North Central", "INDIANA" = "East North Central", "MICHIGAN" = "East North Central",
  "OHIO" = "East North Central", "WISCONSIN" = "East North Central",
  
  "IOWA" = "West North Central", "KANSAS" = "West North Central", "MINNESOTA" = "West North Central",
  "MISSOURI" = "West North Central", "NEBRASKA" = "West North Central",
  "NORTH DAKOTA" = "West North Central", "SOUTH DAKOTA" = "West North Central",
  
  "DELAWARE" = "South Atlantic", "DISTRICT OF COLUMBIA" = "South Atlantic", "District of Columbia" = "South Atlantic", "FLORIDA" = "South Atlantic",
  "GEORGIA" = "South Atlantic", "MARYLAND" = "South Atlantic", "NORTH CAROLINA" = "South Atlantic",
  "SOUTH CAROLINA" = "South Atlantic", "VIRGINIA" = "South Atlantic", "WEST VIRGINIA" = "South Atlantic",
  
  "ALABAMA" = "East South Central", "KENTUCKY" = "East South Central",
  "MISSISSIPPI" = "East South Central", "TENNESSEE" = "East South Central",
  
  "ARKANSAS" = "West South Central", "LOUISIANA" = "West South Central",
  "OKLAHOMA" = "West South Central", "TEXAS" = "West South Central",
  
  "ARIZONA" = "Mountain", "COLORADO" = "Mountain", "IDAHO" = "Mountain",
  "MONTANA" = "Mountain", "NEVADA" = "Mountain", "NEW MEXICO" = "Mountain",
  "UTAH" = "Mountain", "WYOMING" = "Mountain",
  
  "ALASKA" = "Pacific", "CALIFORNIA" = "Pacific", "HAWAII" = "Pacific",
  "OREGON" = "Pacific", "WASHINGTON" = "Pacific"
)

division <- state_tibble %>%
  mutate(
    division = if_else(
      area_name %in% names(state_division),
      state_division[area_name],
      "ERROR"
    )
  )
head(division)
```

## Functions and Wrapper:

```{r}
library(tidyverse)
library(rvest)
library(purrr)
library(tidyr)
library(stringr)
```
## Global helper: mapping states to census divisions
```{r}
state_division <- c(
  "CONNECTICUT" = "New England", "MAINE" = "New England", "MASSACHUSETTS" = "New England",
  "NEW HAMPSHIRE" = "New England", "RHODE ISLAND" = "New England", "VERMONT" = "New England",
  
  "NEW JERSEY" = "Mid-Atlantic", "NEW YORK" = "Mid-Atlantic", "PENNSYLVANIA" = "Mid-Atlantic",
  
  "ILLINOIS" = "East North Central", "INDIANA" = "East North Central", "MICHIGAN" = "East North Central",
  "OHIO" = "East North Central", "WISCONSIN" = "East North Central",
  
  "IOWA" = "West North Central", "KANSAS" = "West North Central", "MINNESOTA" = "West North Central",
  "MISSOURI" = "West North Central", "NEBRASKA" = "West North Central",
  "NORTH DAKOTA" = "West North Central", "SOUTH DAKOTA" = "West North Central",
  
  "DELAWARE" = "South Atlantic", "DISTRICT OF COLUMBIA" = "South Atlantic", "District of Columbia" = "South Atlantic", "FLORIDA" = "South Atlantic",
  "GEORGIA" = "South Atlantic", "MARYLAND" = "South Atlantic", "NORTH CAROLINA" = "South Atlantic",
  "SOUTH CAROLINA" = "South Atlantic", "VIRGINIA" = "South Atlantic", "WEST VIRGINIA" = "South Atlantic",
  
  "ALABAMA" = "East South Central", "KENTUCKY" = "East South Central",
  "MISSISSIPPI" = "East South Central", "TENNESSEE" = "East South Central",
  
  "ARKANSAS" = "West South Central", "LOUISIANA" = "West South Central",
  "OKLAHOMA" = "West South Central", "TEXAS" = "West South Central",
  
  "ARIZONA" = "Mountain", "COLORADO" = "Mountain", "IDAHO" = "Mountain",
  "MONTANA" = "Mountain", "NEVADA" = "Mountain", "NEW MEXICO" = "Mountain",
  "UTAH" = "Mountain", "WYOMING" = "Mountain",
  
  "ALASKA" = "Pacific", "CALIFORNIA" = "Pacific", "HAWAII" = "Pacific",
  "OREGON" = "Pacific", "WASHINGTON" = "Pacific"
)
```

## Step 1&2: read & pivot to long form:

```{r}
read_and_pivot <- function(url, value_var = "enrollment") {
  read_csv(url, show_col_types = FALSE) %>% 
    select(
      area_name = Area_name,
      STCOU,
      ends_with("D")
    ) %>% 
    pivot_longer(
      cols           = -c(area_name, STCOU),
      names_to       = "raw_var",
      values_to      = value_var,
      values_drop_na = TRUE
    )
}

# Test  on edu01a.csv
edu01a_long <- read_and_pivot("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
head(edu01a_long, 5)
```

## Step 3: parse raw_var into year & measurement

```{r}
parse_raw <- function(df) {
  df %>% 
    mutate(
      yr_code     = str_sub(raw_var, -3, -2),
      year        = as.integer(if_else(
                       as.integer(yr_code) <= 30,
                       paste0("20", yr_code),
                       paste0("19", yr_code)
                     )),
      measurement = str_sub(raw_var, 1, 7)
    ) %>% 
    select(-yr_code)
}

# Test:
edu01a_parsed <- parse_raw(edu01a_long)
head(edu01a_parsed, 5)
```

## Step 5:for county data, extract state code and set class

```{r}
add_state_county <- function(county_df) {
  county_df %>% 
    mutate(state = str_sub(area_name, -2, -1))
}

# Test it on the county subset:
county_subset <- edu01a_parsed %>% filter(str_detect(area_name, ", \\w\\w$"))
head(add_state_county(county_subset), 5)
```

## Step 6: for state data, map to division and set class

```{r}
add_division <- function(state_df) {
  state_df %>%
    mutate(division = if_else(
      area_name %in% names(state_division),
      state_division[area_name],
      "ERROR"
    )) %>%
    structure(class = c("state", class(state_df)))
}
# Test it on the non‚Äêcounty subset:
state_subset <- edu01a_parsed %>% filter(!str_detect(area_name, ", \\w\\w$"))
head(add_division(state_subset), 5)
```
## step 7: split and classify the data
```{r}
split_and_classify <- function(df) {
  county_idx  <- grep(", \\w\\w$", df$area_name)
  county_part <- df[county_idx, ]
  state_part  <- df[-county_idx, ]
  
  list(
    county = add_state_county(county_part),
    state  = add_division(state_part)
  )
}

# example
parts01b <- split_and_classify(edu01a_parsed)
head(parts01b$county, 5)
head(parts01b$state,  5)
```

## Wrapper & combine functions

```{r}
my_wrapper <- function(url, value_var = "enrollment") {
    read_and_pivot(url, value_var) %>%
    parse_raw() %>%
    add_state_county() %>%
    add_division() %>%
    split_and_classify()
}

url_a <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"
url_b <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"

edu_a <- my_wrapper(url_a, value_var = "enrollment")
edu_b <- my_wrapper(url_b, value_var = "enrollment")

combine_two <- function(w1, w2) {
  list(
    county = bind_rows(w1$county, w2$county),
    state  = bind_rows(w1$state,  w2$state)
  )
}

edu_combined <- combine_two(edu_a, edu_b)

# Check results
head(edu_combined$county,  5)
head(edu_combined$state,   5)
```

## Plot function:
# 1) State-level plot method
```{r}
plot.state <- function(df, var_name = "enrollment", ...) {
  df %>%
    filter(division != "ERROR") %>%
    group_by(division, year) %>%
    summarize(
      mean_val = mean(.data[[var_name]], na.rm = TRUE),
      .groups   = "drop"
    ) %>%
    ggplot(aes(x = year, y = mean_val, color = division)) +
    geom_line() +
    labs(
      x     = "Year",
      y     = paste("Mean", var_name),
      title = paste("Mean", var_name, "by Division over Time")
    )
}

# Test:
plot.state (state_tibble, var_name = "enrollment")
```
## 2) County-level plot method
```{r}
plot.county <- function(df,
                        var_name   = "enrollment",
                        state_name = NULL,
                        top_bottom = "top",
                        n          = 5,
                        ...) {
  # optionally filter to a single state
  if (!is.null(state_name)) {
    df <- df %>% filter(state == state_name)
  }

  # compute overall means by county
  means <- df %>%
    group_by(area_name) %>%
    summarize(
      mean_val = mean(.data[[var_name]], na.rm = TRUE),
      .groups   = "drop"
    ) %>%
    arrange(if (top_bottom == "top") desc(mean_val) else mean_val)

  # select the top or bottom N counties
  selected <- head(means$area_name, n)

  # filter original data to those counties
  plot_df <- df %>% filter(area_name %in% selected)

  # draw the time series of the raw values
  ggplot(plot_df, aes(x = year, y = .data[[var_name]], color = area_name)) +
    geom_line() +
    labs(
      x     = "Year",
      y     = var_name,
      title = paste(
        str_to_title(top_bottom), n,
        "counties",
        if (!is.null(state_name)) paste("in", state_name) else ""
      )
    )
}

# Example Usage:
plot.county(county_tibble,  var_name = "enrollment")
```


## Put it together
```{r put-it-together, message=FALSE}
## 1) Load url
edu_a <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",
                    value_var = "enrollment")
edu_b <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv",
                    value_var = "enrollment")

## 2) Combine
edu_combined <- combine_two(edu_a, edu_b)

# Inspect structure: [[1]] = county, [[2]] = state
str(edu_combined)

## 3) Extract the state-level tibble via indexing and plot it
state_df  <- edu_combined[[2]]   
plot(state_df, var_name = "enrollment")

## 4) Extract the county-level tibble and plot with various options
county_df <- edu_combined[[1]]   

# 4a) NC, top 20 counties
plot.county(county_df,
     var_name   = "enrollment",
     state_name = "NC",
     top_bottom = "top",
     n          = 20)

# 4b) SC, bottom 7 counties
plot.county(county_df,
     var_name   = "enrollment",
     state_name = "SC",
     top_bottom = "bottom",
     n          = 7)

# 4c) defaults (all states, top 5)
plot.county(county_df,
     var_name = "enrollment")

# 4d) PA, top 8 counties
plot.county(county_df,
     var_name   = "enrollment",
     state_name = "PA",
     top_bottom = "top",
     n          = 8)
```

# Process the four PST01 datasets
```{r}
pst_01a <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",
                    value_var = "enrollment")
pst_01b <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",
                    value_var = "enrollment")
pst_01c <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",
                    value_var = "enrollment")
pst_01d <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv",
                    value_var = "enrollment")

## 2) Combine
pst_combined_1 <- combine_two(pst_01a, pst_01b)
pst_combined_2 <- combine_two(pst_01c, pst_01d)
pst_combined <- combine_two(pst_combined_1, pst_combined_2)

## 3) Plot the PST01 combined results on State data
plot.state(pst_combined[[2]],  var_name = "enrollment")

## 3) Plot the PST01 combined results on Specified County data
plot.county(pst_combined[[1]], var_name = "enrollment", state_name = "CA", top_bottom = "top",    n = 15)
plot.county(pst_combined[[1]], var_name = "enrollment", state_name = "TX", top_bottom = "top",     n = 4)
plot.county(pst_combined[[1]], var_name = "enrollment")  # defaults
plot.county(pst_combined[[1]], var_name = "enrollment", state_name = "NY", top_bottom = "top",    n = 10)
```
